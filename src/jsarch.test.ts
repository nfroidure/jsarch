import {
  describe,
  beforeEach,
  afterEach,
  test,
  expect,
  jest,
} from '@jest/globals';
import { Knifecycle, constant } from 'knifecycle';
import initJSArch, { DEFAULT_CONFIG } from './jsarch.js';
import initParser from './parser.js';
import _glob from 'glob';
import fs from 'fs';

const JSARCH_PREFIX = `[//]: # ( )
[//]: # (This file is automatically generated by the \`jsarch\`)
[//]: # (module. Do not change it elsewhere, changes would)
[//]: # (be overriden.)
[//]: # ( )
`;

describe('jsArch service', () => {
  const log = jest.fn();
  const glob = jest.fn<typeof _glob>();
  const readFile = jest.fn<typeof fs.promises.readFile>();
  let $;

  beforeEach(() => {
    $ = new Knifecycle();
    $.register(constant('EOL', '\n'));
    $.register(constant('CONFIG', DEFAULT_CONFIG));
    $.register(constant('log', log));
    $.register(constant('glob', glob));
    $.register(constant('fs', { readFile: readFile }));
    $.register(initParser);
    $.register(initJSArch);
  });

  afterEach(() => {
    log.mockReset();
    glob.mockReset();
    readFile.mockReset();
  });

  test('with no architecture notes', async () => {
    glob.mockResolvedValueOnce([
      '/home/me/project/lulz.js',
      '/home/me/project/kikoo.js',
    ]);

    readFile.mockResolvedValue(`

console.log('test');

    `);

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    expect(readFile.mock.calls).toEqual([
      ['/home/me/project/lulz.js', 'utf-8'],
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    expect(content).toEqual('');
  });

  test('with some architecture notes in a file', async () => {
    glob.mockResolvedValueOnce(['/home/me/project/kikoo.js']);

    readFile.mockResolvedValueOnce(`

/* Architecture Note #1: Title

Some content !
*/

console.log('test');

    `);

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    expect(readFile.mock.calls).toEqual([
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    expect(content).toEqual(
      `${JSARCH_PREFIX}# Architecture Notes

## Summary

1. [Title](#1-title)


## 1. Title

Some content !

[See in context](./blob/master/kikoo.js#L3-L6)

`,
    );
  });

  test('with some architecture notes containing a $', async () => {
    glob.mockResolvedValueOnce(['/home/me/project/kikoo.js']);

    readFile.mockResolvedValueOnce(`

/* Architecture Note #1: \`$autoload\`

Some content !
*/

console.log('test');

    `);

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    expect(readFile.mock.calls).toEqual([
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    expect(content).toEqual(
      `${JSARCH_PREFIX}# Architecture Notes

## Summary

1. [\`$autoload\`](#1-\`$autoload\`)


## 1. \`$autoload\`

Some content !

[See in context](./blob/master/kikoo.js#L3-L6)

`,
    );
  });

  test('with some architecture notes in a TypeScript file', async () => {
    $.register(
      constant('CONFIG', {
        ...DEFAULT_CONFIG,
        parserOptions: {
          ...DEFAULT_CONFIG.parserOptions,
          plugins: ['typescript'],
        },
      }),
    );
    glob.mockResolvedValueOnce(['/home/me/project/kikoo.js']);

    readFile.mockResolvedValueOnce(`

interface lol {
  lol : string;
}

/* Architecture Note #1: Title

Some content !
*/

console.log('test');

    `);

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    expect(readFile.mock.calls).toEqual([
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    expect(content).toEqual(
      `${JSARCH_PREFIX}# Architecture Notes

## Summary

1. [Title](#1-title)


## 1. Title

Some content !

[See in context](./blob/master/kikoo.js#L7-L10)

`,
    );
  });

  test('with some architecture notes in a file and bitbucket links', async () => {
    $.register(
      constant('CONFIG', {
        ...DEFAULT_CONFIG,
        gitProvider: 'bitbucket',
      }),
    );

    glob.mockResolvedValueOnce(['/home/me/project/kikoo.js']);

    readFile.mockResolvedValueOnce(`

/* Architecture Note #1: Title

Some content !
*/

console.log('test');

    `);

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    expect(readFile.mock.calls).toEqual([
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    expect(content).toEqual(
      `${JSARCH_PREFIX}# Architecture Notes

## Summary

1. [Title](#1-title)


## 1. Title

Some content !

[See in context](./blob/master/kikoo.js#kikoo.js-3:6)

`,
    );
  });

  test('with some indented architecture notes in a file', async () => {
    glob.mockResolvedValueOnce(['/home/me/project/kikoo.js']);

    readFile.mockResolvedValueOnce(`

    /* Architecture Note #1: Title

    Some content !
    Nice!
    */

console.log('test');

    `);

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    expect(readFile.mock.calls).toEqual([
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    expect(content).toEqual(
      `${JSARCH_PREFIX}# Architecture Notes

## Summary

1. [Title](#1-title)


## 1. Title

Some content !
Nice!

[See in context](./blob/master/kikoo.js#L3-L7)

`,
    );
  });

  test('with architecture notes in several files', async () => {
    glob.mockResolvedValueOnce([
      '/home/me/project/lulz.js',
      '/home/me/project/kikoo.js',
    ]);

    readFile.mockResolvedValueOnce(`
/* Architecture Note #1.1: Title

Some content !
*/

console.log('test');
/* Architecture Note #1: Title

Some content !
*/

    `);

    readFile.mockResolvedValueOnce(`
/* Architecture Note #1.3: Title

Some content !
*/

console.log('test');
/* Architecture Note #2: Title

Some content !
*/

    `);

    const { jsArch } = await $.run(['jsArch']);
    const content = await jsArch({
      patterns: ['**/*.js'],
      base: './blob/master',
      cwd: '/home/me/project',
    });
    expect(readFile.mock.calls).toEqual([
      ['/home/me/project/lulz.js', 'utf-8'],
      ['/home/me/project/kikoo.js', 'utf-8'],
    ]);
    expect(content).toEqual(
      `${JSARCH_PREFIX}# Architecture Notes

## Summary

1. [Title](#1-title)
   1. [Title](#11-title)
   3. [Title](#13-title)
2. [Title](#2-title)


## 1. Title

Some content !

[See in context](./blob/master/lulz.js#L8-L11)



### 1.1. Title

Some content !

[See in context](./blob/master/lulz.js#L2-L5)



### 1.3. Title

Some content !

[See in context](./blob/master/kikoo.js#L2-L5)



## 2. Title

Some content !

[See in context](./blob/master/kikoo.js#L8-L11)

`,
    );
  });
});
